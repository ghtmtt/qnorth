# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QNorthDialog
                                 A QGIS plugin
 Descrizione breve
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-12
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Matteo
        email                : matteo@ghetta
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.core import (
    Qgis,
    QgsVectorLayer,
    QgsProject,
    QgsWkbTypes
)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui','qnorth_dialog_base.ui'))


class QNorthDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(QNorthDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface

        self.layer_combo.setFilters(Qgis.LayerFilter.PointLayer)
        self.button_box.accepted.connect(self.creaPunto)

    def creaPunto(self):

        vl = self.layer_combo.currentLayer()

        d = {}

        for i in vl.getFeatures():
            d[i] = i.geometry().asPoint().y()

        l = sorted(d, key=d.get, reverse=True)
        max_y = l[0]

        memory_layer = QgsVectorLayer(
            f'{QgsWkbTypes.displayString(vl.wkbType())}?crs={vl.crs().authid()}',
            'QNorth',
            'memory'
        )

        pr = memory_layer.dataProvider()
        pr.addAttributes(vl.fields())
        memory_layer.updateFields()

        pr.addFeatures([max_yy])

        if memory_layer.isValid():
            QgsProject.instance().addMapLayer(memory_layer)
            self.iface.messageBar().pushMessage('Bravo!', Qgis.Success)
        else:
            self.iface.messageBar().pushMessage('Non bravo!', Qgis.Critical)


